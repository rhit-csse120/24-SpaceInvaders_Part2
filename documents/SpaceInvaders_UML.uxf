<diagram program="umletino" version="15.1"><zoom_level>10</zoom_level><help_text></help_text><element><id>UMLClass</id><coordinates><x>10</x><y>240</y><w>270</w><h>100</h></coordinates><panel_attributes>Controller
bg=red
-

-
get_and_handle_events()
exit_if_time_to_quit(events)
key_was_pressed_on_this_cycle(key, events)
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLPackage</id><coordinates><x>300</x><y>0</y><w>350</w><h>160</h></coordinates><panel_attributes>main
--
bg=orange
halign=left
Initializes PyGame.

Implements a Model-View-Controller (MVC) architecture:
1. Constructs the Game, View and Controller.
2. Enters the game loop, which repeatedly:
  -- Asks the Controller object to get and respond to events.
  -- Asks the Game object to run one cycle.
  -- Asks the View object to draw everything.</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>830</x><y>0</y><w>220</w><h>120</h></coordinates><panel_attributes>View
bg=red
-

-
draw_everything()
  -- Draws the background.
  -- Asks the Game object to ask the
     Game things to draw themselves.</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>340</x><y>210</y><w>340</w><h>130</h></coordinates><panel_attributes>Game
bg=red
-

-
run_one_cycle()
  -- tells the Game to do whatever actions need to happen
     (independently of user input) during this cycle of the game loop
draw_game()
  -- tells the Game objects  to draw themselves
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLPackage</id><coordinates><x>810</x><y>210</y><w>230</w><h>80</h></coordinates><panel_attributes>screen
--
bg=yellow
The pygame.Surface object returned
by pygame.display.set_model().</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>390</x><y>150</y><w>140</w><h>80</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=1
</panel_attributes><additional_attributes>110;60;110;40;10;40;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>210</x><y>150</y><w>160</w><h>110</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=1</panel_attributes><additional_attributes>10;90;10;50;80;50;140;10</additional_attributes></element><element><id>Relation</id><coordinates><x>640</x><y>30</y><w>210</w><h>50</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=1</panel_attributes><additional_attributes>190;20;10;20</additional_attributes></element><element><id>Relation</id><coordinates><x>920</x><y>110</y><w>40</w><h>140</h></coordinates><panel_attributes>lt=&lt;-
m1=1</panel_attributes><additional_attributes>12;120;10;13</additional_attributes></element><element><id>Relation</id><coordinates><x>540</x><y>150</y><w>340</w><h>80</h></coordinates><panel_attributes>lt=&lt;-
m2=constructs
m1=1
m2pos=10,-12
m1pos=10,-20

</panel_attributes><additional_attributes>320;60;200;30;10;30;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>670</x><y>110</y><w>220</w><h>140</h></coordinates><panel_attributes>lt=&lt;-
m1=1</panel_attributes><additional_attributes>10;120;150;70;200;13</additional_attributes></element><element><id>UMLNote</id><coordinates><x>0</x><y>0</y><w>240</w><h>60</h></coordinates><panel_attributes>Model-View-Controller
(MVC) architecture.
PUT THE NAME OF YOUR GAME HERE.
bg=blue</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLActor</id><coordinates><x>20</x><y>80</y><w>60</w><h>110</h></coordinates><panel_attributes>Player 1</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>40</x><y>140</y><w>90</w><h>120</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-
arrow keys</panel_attributes><additional_attributes>10;100;10;10</additional_attributes></element><element><id>UMLActor</id><coordinates><x>110</x><y>80</y><w>60</w><h>110</h></coordinates><panel_attributes>Player 2</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>130</x><y>140</y><w>90</w><h>120</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-
wasd keys</panel_attributes><additional_attributes>10;100;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>670</x><y>230</y><w>160</w><h>50</h></coordinates><panel_attributes>lt=&lt;-
m1=1
</panel_attributes><additional_attributes>140;20;10;20</additional_attributes></element><element><id>UMLNote</id><coordinates><x>170</x><y>80</y><w>120</w><h>70</h></coordinates><panel_attributes>Here are examples
of how your Player(s)
interaction(s) might
be represented.
bg=blue</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>750</x><y>340</y><w>180</w><h>210</h></coordinates><panel_attributes>Enemies
-
screen: pygame.Surface
enemy_rows
enemies_per_row
distance_from_top
h_space_between_enemies
v_space_between_enemies
h_speed, v_speed
list_of_enemies: [Enemy]
-
draw()
move()
remove_exploded_enemies()</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>630</x><y>330</y><w>140</w><h>70</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=1
</panel_attributes><additional_attributes>120;40;20;40;10;13</additional_attributes></element><element><id>Relation</id><coordinates><x>540</x><y>330</y><w>90</w><h>130</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=1
</panel_attributes><additional_attributes>10;113;10;13</additional_attributes></element><element><id>Relation</id><coordinates><x>80</x><y>330</y><w>300</w><h>130</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=1
</panel_attributes><additional_attributes>10;113;10;70;250;70;280;13</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1000</x><y>380</y><w>150</w><h>270</h></coordinates><panel_attributes>Enemy
-
screen: pygame.Surface
image
width, height
x, y
h_speed, v_speed
direction
original_x
explosion_sound
is_off_the_screen: bool
explosion_sound
has_exploded: bool
-
draw()
move()
explode()
is_hit_by(Missile)
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>280</x><y>480</y><w>160</w><h>190</h></coordinates><panel_attributes>Missile
-
screen: pygame.Surface
x, y
color
width, height
speed
is_off_the_screen: bool
has_exploded: bool
-
draw()
move()
explode()

</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>180</x><y>520</y><w>120</w><h>80</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=*
m1pos=0,5


</panel_attributes><additional_attributes>100;20;10;23</additional_attributes></element><element><id>Relation</id><coordinates><x>920</x><y>430</y><w>100</w><h>80</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=*
m1pos=0,5


</panel_attributes><additional_attributes>80;23;10;23</additional_attributes></element><element><id>Relation</id><coordinates><x>180</x><y>420</y><w>360</w><h>70</h></coordinates><panel_attributes>lt=&lt;-
m1=1
</panel_attributes><additional_attributes>340;30;90;20;10;43</additional_attributes></element><element><id>Relation</id><coordinates><x>120</x><y>240</y><w>1090</w><h>500</h></coordinates><panel_attributes>lt=&lt;-
m1=1
</panel_attributes><additional_attributes>920;10;1070;10;1070;470;10;480;10;453</additional_attributes></element><element><id>Relation</id><coordinates><x>430</x><y>500</y><w>110</w><h>50</h></coordinates><panel_attributes>lt=&lt;-
m1=*
</panel_attributes><additional_attributes>10;23;90;13</additional_attributes></element><element><id>Relation</id><coordinates><x>1000</x><y>280</y><w>60</w><h>120</h></coordinates><panel_attributes>lt=&lt;-
m1=1

</panel_attributes><additional_attributes>10;13;40;103</additional_attributes></element><element><id>Relation</id><coordinates><x>880</x><y>280</y><w>70</w><h>80</h></coordinates><panel_attributes>lt=&lt;-
m1=1


</panel_attributes><additional_attributes>50;13;10;63</additional_attributes></element><element><id>Relation</id><coordinates><x>600</x><y>270</y><w>590</w><h>450</h></coordinates><panel_attributes>lt=&lt;-
m1=1


</panel_attributes><additional_attributes>440;13;570;10;570;410;10;400;10;323</additional_attributes></element><element><id>Relation</id><coordinates><x>360</x><y>250</y><w>840</w><h>490</h></coordinates><panel_attributes>lt=&lt;-
m1=1


</panel_attributes><additional_attributes>680;13;820;10;820;450;10;450;10;423</additional_attributes></element><element><id>UMLClass</id><coordinates><x>520</x><y>440</y><w>170</w><h>150</h></coordinates><panel_attributes>Missiles
-
screen: pygame.Surface
list_of_missiles: [Missile]
-
draw()
move()
add_missile()
remove_dead_missiles()
handle_explosions(Enemies)
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>40</x><y>440</y><w>150</w><h>250</h></coordinates><panel_attributes>Fighter
-
screen: pygame.Surface
image
width, height
x, y
speed
fire_sound
explosion_sound
has_exploded: bool
-
draw()
move_left()
move_right()
fire_missile()
explode()
is_hit_by(Enemy)

</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>270</x><y>260</y><w>90</w><h>50</h></coordinates><panel_attributes>lt=&lt;-
m1=1
</panel_attributes><additional_attributes>70;20;10;20</additional_attributes></element></diagram>